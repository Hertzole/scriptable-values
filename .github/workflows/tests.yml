name: Unity Tests
on:
  push:
    paths: # Only run jobs if files changed at these paths
      - '.github/workflows/**'
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - 'ci/**'
      - 'Generator/**'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

concurrency:
  group: unity-tests
  cancel-in-progress: true

jobs:
  generator-tests:
    name: Generator tests
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install .NET
      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8'

      # Run the generator tests
      - name: Run generator tests
        run: |
          cd Generator
          dotnet build -c Release
          dotnet test -c Release --no-build --verbosity normal --collect:"XPlat Code Coverage;Format=opencover" --results-directory TestResults --logger:"trx;LogFileName=TestResults.trx" --logger:"console;verbosity=normal"

      # Upload the generator test results
      - name: Upload test results
        id: upload-generator-results
        uses: actions/upload-artifact@v4
        with:
          name: generator-test-results
          path: Generator/TestResults

  # Run the Unity tests
  tests:
    name: Run ${{ matrix.unity-version }} tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version:
          - 2021.3.45f1
          - 2022.3.55f1
          - 2023.2.20f1
          - 6000.0.32f1
    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      # Cache library folder for faster tests
      - name: Cache library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.unity-version }}

      # Run tests
      - name: Run tests
        uses: game-ci/unity-test-runner@v4
        id: tests
        with:
          unityVersion: ${{ matrix.unity-version }}
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+Hertzole.ScriptableValues'

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results - ${{ matrix.unity-version }}
          path: ${{ steps.tests.outputs.artifactsPath }}

      # Upload coverage results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage results - ${{ matrix.unity-version }}
          path: ${{ steps.tests.outputs.coveragePath }}

  sonarscan:
    needs: [tests, generator-tests]
    name: SonarScan
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-6000.0.32f1-base-3.1.0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Cache library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-Scanner
          restore-keys: |
            Library-Scanner

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x

      - name: Install scanner
        run: dotnet tool install dotnet-sonarscanner --tool-path .

      # Download the coverage results
      - name: Download coverage results
        id: download-coverage
        uses: actions/download-artifact@v4
        with:
          pattern: 'Coverage results - *'
          path: Coverage

      # The test results have a different path than what SonarQube can read.
      # We need to remove the github/workspace/ path.
      - name: Fix paths
        run: |
          chmod +x ./ci/fix_paths.sh
          ./ci/fix_paths.sh Coverage

      - name: Generate report
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        # Only run on master branch
        if: github.ref == 'refs/heads/master'
        with:
          reports: "${{ steps.download-coverage.outputs.download-path }}/*/workspace-opencov/*/*.xml"
          targetdir: "CoverageReport/coverage"
          reporttypes: "Html;Badges"

      - name: Upload report
        uses: actions/upload-pages-artifact@v3
        id: upload_report
        # Only run on master branch
        if: github.ref == 'refs/heads/master'
        with:
          path: CoverageReport

      - name: Activate Unity
        continue-on-error: true
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          echo "$UNITY_LICENSE" | tr -d '\r' > License.ulf
          unity-editor -nographics -logFile /dev/stdout -manualLicenseFile License.ulf -quit 

      - name: Generate Solution
        run: |
          unity-editor -nographics -logFile /dev/stdout -customBuildName scriptable-values -projectPath . -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution -quit
          ls

      - name: SonarQube analysis
        env:
          FrameworkPathOverride: /opt/unity/Editor/Data/MonoBleedingEdge/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./dotnet-sonarscanner begin \
           /o:"hertzole" \
           /k:"scriptable-values" \
           /d:sonar.host.url=https://sonarcloud.io \
           /d:sonar.verbose=false \
           /d:sonar.token=$SONAR_TOKEN \
           /d:sonar.scanner.scanAll=false \
           /d:sonar.cs.opencover.reportsPaths="${{ steps.download-coverage.outputs.download-path }}/*/workspace-opencov/*/*.xml" \
           /d:sonar.exclusions="Coverage/**, CoverageReport/**"
          dotnet build scriptable-values.sln
          ./dotnet-sonarscanner end /d:sonar.token=$SONAR_TOKEN

  deploy_pages:
    needs: [sonarscan]
    name: Deploy Pages
    runs-on: ubuntu-latest
    # Only run on master branch
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

